<zk xmlns="http://www.zkoss.org/2005/zul"
	xmlns:h="http://www.w3.org/1999/xhtml"
	xmlns:zk="http://www.zkoss.org/2005/zk"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.zkoss.org/2005/zul
		http://www.zkoss.org/2005/zul/zul.xsd">

	<task id="window" onSave="model.commit()"
		onPrepareTransition=" model.commit()"
		onLoad="doLoad()" width="100%">
		
		<datamodel id="model" rootNode="root" src="bpm/descriptorBU.xml" />
		
		<style>
			div.blockgroups {width: 49%; vertical-align: top; display:inline-block; margin-top: 3em}
		</style>
		<zscript>
			<![CDATA[
				com.soffid.iam.recertification.ui.RecertificateMessages msg = new com.soffid.iam.recertification.ui.RecertificateMessages();
				
				Long id = null;
				
				
				void doLoad () {
					id = window.getTask().getVariables().get(com.soffid.iam.addons
							.recertification.Constants.RECERTIFICATION_ID_VAR);
					
					model.getJXPathContext().getVariables().declareVariable("processId", id);
					model.refresh ();
					onChangeRecertificationType();
				}
				
				void onChangeRecertificationType()
				{
					String template = model.getValue("/process[1]/template");
					model.getVariables().declareVariable("template", template);
					try {
//						com.soffid.iam.addons.recertification.common.RecertificationType type = model.getValue("/template[@name=$template]/@type");
						com.soffid.iam.addons.recertification.common.RecertificationType type = null;
						es.caib.zkib.jxpath.JXPathContext ctx = model.getJXPathContext();
						for (Iterator iterator = ctx.iterate("/template"); iterator.hasNext();)
						{
							com.soffid.iam.addons.recertification.common.RecertificationTemplate t = iterator.next().getInstance();
							System.out.println(t);
							if (t.getName().equals (template))
								type = t.getType();
						}
						System.out.println("Type = "+type);
						if (type == null)
						{
							type = com.soffid.iam.addons.recertification.common.RecertificationType.ENTITLEMENTS;
							model.setValue("/process[1]/@type", type);
						}
						if (type.equals(com.soffid.iam.addons.recertification.common.RecertificationType.ENTITLEMENTS))
						{
							gridGroups.setVisible(true);
						}
						else if (type.equals(com.soffid.iam.addons.recertification.common.RecertificationType.ACCOUNTS))
						{
							gridGroups.setVisible(false);						
						}
						else
						{
							gridGroups.setVisible(false);
						}
					} catch (Exception e) {
						
					}
					
				}
				
				void addExistingGroup(Component comp)
				{
					desktop.getPage("grupsLlista").setAttribute("tipus", "");
					desktop.getPage("grupsLlista").setAttribute("llistaObsolets", false);
					Events.postEvent("onInicia",
							desktop.getPage("grupsLlista").getFellow("esquemaLlista"), comp);
				}
				
				void addExistingRole(Component comp)
				{
					desktop.getPage("rolsLlista").setAttribute("tipus", "cap");
					desktop.getPage("rolsLlista").setAttribute("mostraGestionableWF",
							"true");
//					desktop.getPage("rolsLlista").setAttribute("rol_bbdd", "soffid");
					Events.postEvent("onInicia",
							desktop.getPage("rolsLlista").getFellow("esquemaLlista"), comp);
				}
				
				void addExistingIS(Component comp)
				{
					Events.postEvent("onInicia",
							desktop.getPage("aplicacionsLlista").getFellow("esquemaLlista"),
							comp);
				}
				
				void updateGroupData (Object[] data)
				{
					txtGrupID.setValue((String) (data[0]));
					addGroup();
				}
				
				void updateManagerData(Object[] data)
				{
					Textbox tb = self.getParent().getChildren().get(0);
					tb.setValue((String) (data[0]));
					
				}
				
				void updateOwnerData(Object[] data)
				{
					Textbox tb = self.getParent().getChildren().get(0);
					tb.setValue((String) (data[0]));
				}

				void updateISData(String data)
				{
					txtIS.setValue(data);
					addIS();
				}
				
				void addGroup ()
				{
					// Test if group exists
					String groupId = txtGrupID.getValue();
					
					es.caib.seycon.ng.servei.ejb.GrupService gs = es.caib.seycon.ng.EJBLocator.getGrupService ();
					
					if ( gs.findGrupByCodiGrup(groupId) == null)
					{
						es.caib.zkib.zkiblaf.Missatgebox.avis("Group "+groupId+" does not exist");
					} else {
						String path = es.caib.zkib.datasource
								.XPathUtils.createPath(model, "/process[1]/group");
						
						model.getJXPathContext().setValue(path + "/@status",
								com.soffid.iam.addons.recertification
									.common.ProcessStatus.PREPARATION);
						model.getJXPathContext().setValue(path + "/@group",
								txtGrupID.getValue());
						model.getJXPathContext().setValue(path + "/@managerRole",
								"SOFFID_OU_MANAGER/"+txtGrupID.getValue());
						model.getJXPathContext().setValue(path + "/@processId", id);
						
						txtGrupID.setValue("");
					}
				}
				
				void addIS()
				{
					// Test if group exists
					String appId = txtIS.getValue();
					
					es.caib.seycon.ng.servei.ejb.AplicacioService as = es.caib.seycon.ng.EJBLocator.getAplicacioService ();
					
					if ( as.findAplicacioByCodiAplicacio(appId) == null)
					{
						es.caib.zkib.zkiblaf.Missatgebox.avis("Information system "+appId+" does not exist");
					} else {
						String path = es.caib.zkib.datasource
								.XPathUtils.createPath(model, "/process[1]/app");
						
						model.getJXPathContext().setValue(path + "/@informationSystem",
								txtIS.getValue());
						model.getJXPathContext().setValue(path + "/@appOwnerRole",
								"SOFFID_APP_MANAGER/"+txtIS.getValue());
						model.getJXPathContext().setValue(path + "/@processId", id);
						
						txtIS.setValue("");
					}
				}
				
				void deleteGroup (Component c)
				{
					es.caib.zkib.binder.BindContext ctx = es.caib.zkib.datasource
							.XPathUtils.getComponentContext(c);
					String pathToRemove = ctx.getXPath();
					es.caib.zkib.datasource.XPathUtils.removePath(model, pathToRemove);
				}
				
				void deleteApp (Component c)
				{
					es.caib.zkib.binder.BindContext ctx = es.caib.zkib.datasource
							.XPathUtils.getComponentContext(c);
					String pathToRemove = ctx.getXPath();
					es.caib.zkib.datasource.XPathUtils.removePath(model, pathToRemove);
				}
			]]>
		</zscript>

		<div>
			<label value="${msg['reviewType']}" style="display: inline-block; width:15em"/>
			<listbox mold="select" bind="/window/model:/process[1]/@template" dataPath="/window/model:/template" onSelect="onChangeRecertificationType()">
				<dataitem bind="@name">
					<listcell bind="@name"/>
				</dataitem>
			</listbox>
		</div>
		<div>
			<label value="${msg['description']}"  style="display: inline-block; width:15em"/>
			<textbox bind="/window/model:/process[1]/@name" width="50em"/>
		</div>
		<div sclass="blockgroups" id="gridGroups" >
			<label value="${msg['selectgroup']}"/>
			
			<textbox id="txtGrupID" bind="@codi" sclass="textbox" style="margin-left: 2em; margin-right: 2em"
				onOK="addGroup()"/>
			
			<imageclic src="~./img/grup.gif" tooltiptext="${msg['searchgroup']}">
				<attribute name="onClick">
					addExistingGroup(self);
				</attribute>
				<attribute name="onActualitza">
					updateGroupData(event.data);
				</attribute>
			</imageclic>
			
			<imageclic src="~./img/list-add.gif" tooltiptext="${msg['addgroup']}" 
				onClick="addGroup()"/>

			<grid width="98%" dataPath="/window/model:/process[1]/group"  style="margin-top: 1em">
				<columns>
					<column label="${msg['group']}"/>
					<column label="${msg['managerrole']}" visible="false"/>
					<column width="30px"/>
				</columns>
				
				<datarow>
					<label bind="@group"/>
					
					<hbox>
						<textbox id="txtboxManager" bind="@managerRole"  width="20em" />
						<separator spacing="5px" />
						
						<imageclic id="btnGrantRole" src="~./img/list-add.gif"
							tooltiptext="Select manager role">
								<attribute name="onClick">
									addExistingRole(self);
								</attribute>
								<attribute name="onActualitza">
									updateManagerData(event.data);
								</attribute>
						</imageclic>
					</hbox>
					
					<imageclic src="~./img/list-remove.gif" 
						tooltiptext="Delete group" onClick="deleteGroup(self)"/>
				</datarow>
			</grid>
			<checkbox bind="@userReview" label="${msg['review']}" visible="false"/>
		</div>
		
		<div sclass="blockgroups" >
			<label value="${msg['SelectApp']}"/>
			
			<textbox id="txtIS" onOK="addIS()" bind="@appName" sclass="textbox" style="margin-left: 2em; margin-right: 2em"/>
			
			<imageclic src="/img/info.png" tooltiptext="${msg['SearchIS']}">
				<attribute name="onClick">
					addExistingIS(self);
				</attribute>
				<attribute name="onActualitza">
					updateISData(event.data);
				</attribute>
			</imageclic>
			
			<imageclic src="~./img/list-add.gif" tooltiptext="${msg['AddIS']}" 
				onClick="addIS()"/>
			
			<grid  width="98%" dataPath="/window/model:/process[1]/app" style="margin-top: 1em">
				<columns>
					<column label="${msg['application']}"/>
					<column label="${msg['managerrole']}" visible="false"/>
					<column width="30px"/>
				</columns>
				
				<datarow>
					<label bind="@informationSystem"/>
					
					<hbox>
						<textbox id="txtboxOwner"  bind="@appOwnerRole" width="20em" />
						<separator spacing="5px" />
						
						<imageclic id="btnGrantRole" src="~./img/list-add.gif"
							tooltiptext="Select manager role">
								<attribute name="onClick">
									addExistingRole(self);
								</attribute>
								<attribute name="onActualitza">
									updateOwnerData(event.data);
								</attribute>
						</imageclic>
					</hbox>
					

					<imageclic src="~./img/list-remove.gif" 
						tooltiptext="Delete application" onClick="deleteApp(self)"/>
				</datarow>
			</grid>
		</div>
	</task>
<!-- 	<debugwindow></debugwindow> -->
	
	<include src="grupsllista.zul" />
	<include src="rolsllista.zul" />
	<include src="aplicacionsllista.zul" />
</zk>